MODULE OSD_Mod

  USE Kind_Mod
  IMPLICIT NONE

  CHARACTER*15, PARAMETER :: GebVert='01101510151PGK4' 
  CHARACTER*6, PARAMETER :: NoGebVert1='011104' 
  INTEGER :: InputUnit=10
  INTEGER :: OutUnit=20
  INTEGER :: OutUnitCheck=21

  TYPE PointOSD_T
    REAL(RealKind) :: xP
    REAL(RealKind) :: yP
    REAL(RealKind) :: zP=0.0d0
    CHARACTER*100 :: ALKDESCode=''
    CHARACTER*100 :: SDMLCode=''
    TYPE(PointOSD_T), POINTER :: Next=>NULL()
  END TYPE PointOSD_T

  TYPE LineOSD_T
    TYPE(PointOSD_T) :: P1,P2
    CHARACTER*100 :: ALKDESCode=''
    CHARACTER*100 :: SDMLCode=''
    TYPE(LineOSD_T), POINTER :: Next=>NULL()
  END TYPE LineOSD_T

  TYPE BuildOSD_T
    TYPE(LineOSD_T), POINTER :: ListOfLines
    INTEGER :: NumberOfLines=0
    TYPE(PointOSD_T), POINTER :: ListOfPoints
    TYPE(PointOSD_T) :: PLeft,PRight
    TYPE (BuildOSD_T), POINTER :: Next=>NULL()
  END TYPE BuildOSD_T

  TYPE(BuildOSD_T), POINTER :: ListOfBuild
  INTEGER :: NumberOfBuild=0

CONTAINS 

SUBROUTINE WritePoint(Point,Unit)
  TYPE(PointOSD_T) :: Point
  INTEGER :: Unit
  WRITE(Unit,*) Point%xP,Point%yP 
END SUBROUTINE WritePoint

SUBROUTINE WriteLine(nr_zeile,Line,Unit)
  INTEGER :: nr_zeile
  TYPE(LineOSD_T) :: Line
  INTEGER :: Unit
  WRITE(Unit,*) 'Line ',nr_zeile
  CALL WritePoint(Line%P1,Unit)
  CALL WritePoint(Line%P2,Unit)
END SUBROUTINE WriteLine

SUBROUTINE WriteCodeHeader(Unit)
  INTEGER :: Unit
  WRITE(Unit,'(6a80)') 'ALKDESCodeL','SDMLCodeL' &
                      ,'ALKDESCodeP1','SDMLCodeP1' &
                      ,'ALKDESCodeP2','SDMLCodeP2' 
END SUBROUTINE WriteCodeHeader

SUBROUTINE WriteCode(Line,Unit)
  TYPE(LineOSD_T) :: Line
  INTEGER :: Unit
    CHARACTER*80 :: ALKDESCode
    CHARACTER*80 :: SDMLCode
  WRITE(Unit,'(6a80)') Line%ALKDESCode,Line%SDMLCode &
                      ,Line%P1%ALKDESCode,Line%P1%SDMLCode &
                      ,Line%P2%ALKDESCode,Line%P2%SDMLCode 
END SUBROUTINE WriteCode


SUBROUTINE Read_Lpoints(InputFile)

  CHARACTER*80 :: InputFile
  INTEGER :: nr_z 
  INTEGER :: i

  REAL(RealKind) :: Dist
  CHARACTER(120) :: LineFile
  CHARACTER*4 :: NumFile
  CHARACTER*1 :: DummyChar1,DummyChar2
  TYPE(LineOSD_T) :: Line
  TYPE(LineOSD_T), POINTER :: NewLine
  TYPE(LineOSD_T), POINTER :: Current
  TYPE(PointOSD_T) :: Point
  TYPE(PointOSD_T), POINTER :: NewPoint
  TYPE(BuildOSD_T) :: Line_OJ
  TYPE(BuildOSD_T), POINTER :: NewBuild
  TYPE(BuildOSD_T), POINTER :: CurrBuild

  OPEN(UNIT=InputUnit,FILE=TRIM(InputFile),STATUS='UNKNOWN')
  i=0
  DO
    READ(InputUnit,'(a120)',END=1) LineFile
    IF (INDEX(LineFile,'ETYP=OJ')>0) THEN
      EXIT
    END IF
  END DO 
  WRITE(NumFile,'(I4)') i+1000
  OPEN(UNIT=OutUnit,FILE=TRIM(InputFile)//'.'//NumFile,STATUS='UNKNOWN')
  WRITE(OutUnit,'(a120)') LineFile 
  DO
    READ(InputUnit,'(a120)',END=3) LineFile
    IF (INDEX(LineFile,'ETYP=OJ')>0) THEN
      i=i+1
      CLOSE(OutUnit)
      WRITE(NumFile,'(I4)') i+1000
      OPEN(UNIT=OutUnit,FILE=TRIM(InputFile)//'.'//NumFile,STATUS='UNKNOWN')
    END IF
    WRITE(OutUnit,'(a120)') LineFile 
  END DO 
3 CONTINUE
  CLOSE(UNIT=InputUnit)

  OPEN(UNIT=InputUnit,FILE=TRIM(InputFile),STATUS='UNKNOWN')

! ListOfBuild=>NewBuild
  DO
    READ(InputUnit,'(a120)',END=1) LineFile
    IF (INDEX(LineFile,'ETYP=OJ')>0) THEN
      Line_OJ%ListOfLines=>NULL()
      Line_OJ%NumberOfLines=0
      SP3:DO 
         READ(InputUnit,'(a120)',END=1) LineFile 
!        IF (INDEX(LineFile,'ETYP=LI')>0.OR.INDEX(LineFile,'ETYP=BO')>0) THEN
         IF (INDEX(LineFile,'ETYP=LI')>0) THEN
           DO 
             READ(InputUnit,'(a120)',END=1) LineFile
             IF (INDEX(LineFile,'SDLMCODE')>0) THEN
               LineFile(1:)=LineFile(INDEX(LineFile,"'")+1:) 
               Line%SDMLCode='' 
               Line%SDMLCode=LineFile(:INDEX(LineFile,"'")-1)
               Line%SDMLCode=ADJUSTR(Line%SDMLCode)
             ELSE IF (INDEX(LineFile,'ALKDES')>0) THEN
               LineFile(1:)=LineFile(INDEX(LineFile,"'")+1:) 
               Line%ALKDESCode=''
               Line%ALKDESCode=LineFile(:INDEX(LineFile,"'")-1)
               Line%ALKDESCode=ADJUSTR(Line%ALKDESCode)
             ELSE IF (INDEX(LineFile,'ETYP')>0) THEN
               BACKSPACE InputUnit
               EXIT
             END IF
           END DO
           SP1:DO
             READ(InputUnit,'(a120)',END=1) LineFile
             IF (INDEX(LineFile,'ETYP=PG')>0) THEN
               READ(InputUnit,*,END=1) DummyChar1,DummyChar2,Line%P1%xP 
               READ(InputUnit,*,END=1) DummyChar1,DummyChar2,Line%P1%yP 
               DO
                 READ(InputUnit,'(a120)',END=1) LineFile
                 IF (INDEX(LineFile,'SDLMCODE')>0) THEN
                   LineFile(1:)=LineFile(INDEX(LineFile,"'")+1:)
                   Line%P1%SDMLCode='' 
                   Line%P1%SDMLCode=LineFile(:INDEX(LineFile,"'")-1)
                   Line%P1%SDMLCode=ADJUSTR(Line%P1%SDMLCode)
                 ELSE IF (INDEX(LineFile,'ALKDES')>0) THEN
                   LineFile(1:)=LineFile(INDEX(LineFile,"'")+1:)
                   Line%P1%ALKDESCode=''
                   Line%P1%ALKDESCode=LineFile(:INDEX(LineFile,"'")-1)
                   Line%P1%ALKDESCode=ADJUSTR(Line%P1%ALKDESCode)
                 ELSE IF (INDEX(LineFile,'ETYP')>0) THEN
                   BACKSPACE InputUnit
                   EXIT SP1
                 END IF
               END DO
             END IF
           END DO SP1
           SP2:DO
             READ(InputUnit,'(a120)',END=1) LineFile
             IF (INDEX(LineFile,'ETYP=PG')>0) THEN
               READ(InputUnit,*,END=1) DummyChar1,DummyChar2,Line%P2%xP
               READ(InputUnit,*,END=1) DummyChar1,DummyChar2,Line%P2%yP
               DO
                 READ(InputUnit,'(a120)',END=2) LineFile
                 IF (INDEX(LineFile,'SDLMCODE')>0) THEN
                   LineFile(1:)=LineFile(INDEX(LineFile,"'")+1:)
                   Line%P2%SDMLCode='' 
                   Line%P2%SDMLCode=LineFile(:INDEX(LineFile,"'")-1)
                   Line%P2%SDMLCode=ADJUSTR(Line%P2%SDMLCode)
                 ELSE IF (INDEX(LineFile,'ALKDES')>0) THEN
                   LineFile(1:)=LineFile(INDEX(LineFile,"'")+1:)
                   Line%P2%ALKDESCode=''
                   Line%P2%ALKDESCode=LineFile(:INDEX(LineFile,"'")-1)
                   Line%P2%ALKDESCode=ADJUSTR(Line%P2%ALKDESCode)
                 ELSE IF (INDEX(LineFile,'ETYP')>0) THEN
                   BACKSPACE InputUnit
                   EXIT SP2
                 END IF
               END DO
             END IF
           END DO SP2
2          CONTINUE

        ! IF (INDEX(Line%P1%SDMLCode,NoGebVert1)*INDEX(Line%P2%SDMLCode,NoGebVert1)==0) THEN
          IF (INDEX(Line%ALKDESCode,'31K')==0) THEN
            Line_OJ%NumberOfLines=Line_OJ%NumberOfLines+1
            ALLOCATE(NewLine)
            IF (ASSOCIATED(Line_OJ%ListOfLines)) THEN
              Current%Next=>NewLine
              Current=>NewLine
            ELSE  
              Line_OJ%ListOfLines=>NewLine
              Current=>NewLine
            END IF 
           Current=Line
          END IF
  
        ELSE IF (INDEX(LineFile,'ETYP=OJ')>0) THEN
          BACKSPACE InputUnit
          EXIT SP3
        END IF
      END DO SP3   


      !IF (INDEX(LineFile,'ETYP=')>0) THEN
      !IF (INDEX....) ! wenn nach bestimmten Objekten
      
      IF (ASSOCIATED(Line_OJ%ListOfLines)) THEN
        NumberOfBuild=NumberOfBuild+1
        ALLOCATE(NewBuild)
        IF (ASSOCIATED(ListOfBuild)) THEN
          CurrBuild%Next=>NewBuild
          CurrBuild=>NewBuild
        ELSE
          ListOfBuild=>NewBuild
          CurrBuild=>NewBuild
        END IF
        CurrBuild=Line_OJ 
      END IF
      !END IF   ! INDEX 'OJ'     

    END IF  ! IF(...'ETYP=OJ'....)
  END DO

1 CONTINUE
  
  NumberOfBuild=NumberOfBuild+1
  ALLOCATE(NewBuild)
  IF (ASSOCIATED(ListOfBuild)) THEN
    CurrBuild%Next=>NewBuild
    CurrBuild=>NewBuild
  ELSE
    ListOfBuild=>NewBuild
    CurrBuild=>NewBuild
  END IF
  CurrBuild=Line_OJ


  CurrBuild=>ListOfBuild
  DO i=0,NumberOfBuild-1
    IF (ASSOCIATED(CurrBuild%ListOfLines)) THEN
      Current=>CurrBuild%ListOfLines
      CurrBuild%PLeft%xP=Current%P1%xP
      CurrBuild%PLeft%yP=Current%P1%yP
      CurrBuild%PRight%xP=Current%P1%xP
      CurrBuild%PRight%yP=Current%P1%yP
      nr_z=1
      DO
        CurrBuild%PLeft%xP=MIN(CurrBuild%PLeft%xP,Current%P1%xP)
        CurrBuild%PLeft%yP=MIN(CurrBuild%PLeft%yP,Current%P1%yP)
        CurrBuild%PLeft%xP=MIN(CurrBuild%PLeft%xP,Current%P2%xP)
        CurrBuild%PLeft%yP=MIN(CurrBuild%PLeft%yP,Current%P2%yP)
        CurrBuild%PRight%xP=MAX(CurrBuild%PRight%xP,Current%P1%xP)
        CurrBuild%PRight%yP=MAX(CurrBuild%PRight%yP,Current%P1%yP)
        CurrBuild%PRight%xP=MAX(CurrBuild%PRight%xP,Current%P2%xP)
        CurrBuild%PRight%yP=MAX(CurrBuild%PRight%yP,Current%P2%yP)
        CALL WriteLine(nr_z,Current,OutUnit)
        IF (ASSOCIATED(Current%Next)) THEN
          Current=>Current%Next
        ELSE
          EXIT
        END IF
        nr_z=nr_z+1
      END DO
      Dist=CurrBuild%PRight%xP-CurrBuild%PLeft%xP
      CurrBuild%PRight%xP=CurrBuild%PRight%xP+0.1d0*Dist
      CurrBuild%PLeft%xP=CurrBuild%PLeft%xP-0.1d0*Dist
      Dist=CurrBuild%PRight%yP-CurrBuild%PLeft%yP
      CurrBuild%PRight%yP=CurrBuild%PRight%yP+0.1d0*Dist
      CurrBuild%PLeft%yP=CurrBuild%PLeft%yP-0.1d0*Dist
    END IF

    IF (ASSOCIATED(CurrBuild%Next)) THEN
      CurrBuild=>CurrBuild%Next
    ELSE
      EXIT
    END IF
  END DO

  CLOSE(UNIT=InputUnit)
  CLOSE(Unit=OutUnit)
  CLOSE(Unit=OutUnitCheck)

END SUBROUTINE Read_Lpoints


END MODULE OSD_Mod

